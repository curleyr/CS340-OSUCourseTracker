{% extends "base.j2" %}
{% block title %}Student Term Plans{% endblock %}
{% block script %}
  <script>
    // Handle toggling section displays
    function toggleStudentTermPlanForm(section_to_display, reload=false) {
      if(reload) {
        location.reload()
        return
      }

      const sections = [
        "view_student_term_plans_section", 
        "add_student_term_plan_section", 
        "edit_student_term_plan_courses_section"
      ]

      for (const section of sections) {
        if (section === section_to_display) {
          document.getElementById(section).style.display = "block"
        } else {
          document.getElementById(section).style.display = "none"
        }
      }
    }

    // Handle adding a student term plan
    async function addStudentTermPlan(event) {
      // Prevent page from refreshing
      event.preventDefault();

      // Instantiate FormData object
      const formData = new FormData(event.target);

      // Check to ensure at least one course has been selected
      if (!formData.has("courses")) {
        window.alert("At least 1 course needs to be selected to create a student term plan.");
        return;
      }
      // Initialize data object. This will be built below
      const data = {};

      // Iterate through each key value pair from formData
      formData.forEach((value, key) => {
        // Course ID array needs to be constructed
        if (key === "courses") {
          // Create empty courses array if not already included in data object
          if (!data[key]) {
            data[key] = [];
          }
          // Push student_term_plan ID to courses array
          data[key].push(value);

        // All non-student_term_plan keys can be pushed directly as separate data object properties
        } else {
          data[key] = value;
        }
      })
      // Logging to console for debugging purposes
      console.log(data);

      // Call Flask route to add student term plan
      const response = await fetch(
        "/add-student-term-plan", {
          headers: {
            "Content-Type": "application/json"
          },
          method: "POST",
          body: JSON.stringify(data)
        }
      )

      const message = await response.json();
      console.log(JSON.stringify(message));

      // Display confirmation/error popup on screen
      window.alert(message["message"].replace('"', ''));

      // Successful Response
      if (response.status == 200) {
        toggleStudentTermPlanForm("view_student_term_plans_section", reload=true)
      } 
    }

    // Handle deleting a student term plan
    async function deleteStudentTermPlan(event, student_term_plan_id, button_element) {
      // Prevent page from refreshing
      event.preventDefault();

      // Display a confirmation popup
      if (!confirm("Are you sure you want to delete this term plan?")) {
        return
      }

      // Call Flask route to delete student term plan
      const response = await fetch(
        `/delete-student-term-plan/${student_term_plan_id}`, {
          method: "DELETE"
        }
      )
    
      const message = await response.json();
      console.log(JSON.stringify(message));

      // Display confirmation/error popup on screen
      window.alert(message["message"].replace('"', ''));

      // Successful Response
      if (response.status == 200) {
      
        // Get the parent <tr> element and remove it after term plan has been deleted
        const tr_element = button_element.closest("tr");
        if (tr_element) {
          tr_element.remove()
        } else {
          console.error("Couldn't remove the table row")
        }
      } 
    }

    // Handle deleting a student term plan course
    async function deleteStudentTermPlanCourse(event, student_term_plan_id, course_id, button_element) {
      // Prevent page from refreshing
      event.preventDefault();

      // Get row being deleted and table element
      const tr_element = button_element.closest("tr");
      const table = tr_element.closest("table");

      // Check if attempting to remove last row
      if (table.querySelectorAll("tr:not(:first-child)").length === 1) {
        window.alert("You can't delete the last course as a student term plan must have a minimum of 1 course.");
        return;
      }

      // Display a confirmation popup
      if (!confirm("Are you sure you want to delete this course?")) {
        return
      }

      // Call Flask route to delete student term plan course
      const response = await fetch(
        "/delete-student-term-plan-course", {
          headers: {
            "Content-Type": "application/json"
          },
          method: "DELETE",
          body: JSON.stringify({"student_term_plan_id": student_term_plan_id, "course_id": course_id})
        }
      )
    
      const message = await response.json();
      console.log(JSON.stringify(message));

      // Display confirmation/error popup on screen
      window.alert(message["message"].replace('"', ''));

      // Successful Response
      if (response.status == 200) {
      
        // Get the parent <tr> element and remove it after term plan course has been deleted
        const tr_element = button_element.closest("tr");
        if (tr_element) {
          tr_element.remove()
        } else {
          console.error("Couldn't remove the table row")
        }
      } 
    }

    // Handle building the student term plan section and toggling display of it to on
    function buildUpdateStudentTermPlanSection(event, student_term_plan_id, student_name, term_name, courses) {
      // Prevent page from refreshing
      event.preventDefault();

      // Build array from comma separated string and trim white space
      const courses_array = courses.split(",").map(course => course.trim());

      // Get array of course objects passed to page
      const course_objects = {{ courses }};
      console.log(course_objects)

      const edit_section = document.getElementById("edit_student_term_plan_courses_section");
      edit_section.innerHTML = "";

      let edit_section_html = `
        <h2>${term_name} Plan for ${student_name}</h2>
        <h3>Update or Delete Course</h3>
        <button id="cancel_edit_student_term_plan_courses_section" type="button" onclick="toggleStudentTermPlanForm('view_student_term_plans_section', reload=true)">Cancel</button>
        <table border="1">
          <tr>
            <th>Current Course</th>
            <th>Updated Course</th>
            <th>Submit</th>
            <th>Delete</th>
          </tr>
      `
      // Build Current Course column value
      for (let index in courses_array) {
        edit_section_html += `
          <tr>
            <td>${courses_array[index]}</td>
          `

        // Build Updated Course column value
        edit_section_html += `
          <td>
            <select name="student_term_plan_update_course" id="student_term_plan_update_course"aria-label="Updated Course">
              <option value="" disabled selected>Select a new course</option>
              <option value="None">None</option>
        `

        for (const course_object of course_objects) {
          const is_current_course = courses_array.includes(course_object["course"]);
          
          edit_section_html += `
            <option value="${course_object["id"]}" ${is_current_course ? "disabled" : ""}>
              ${course_object["course"]}
            </option>
          `;
        }

        // Get course ID of course being updated or deleted
        const course_id = course_objects.find(c => c.course === courses_array[index]).id;

        edit_section_html += `
            </select>
            </td>
            <td><button id="submit_student_term_plan_courses_edit_button" type="button" onclick="updateStudentTermPlanCourse(event, ${student_term_plan_id}, ${course_id}, this)">Submit</button></td>
            <td><button id="delete_student_term_plan_course_button" type="button" onclick="deleteStudentTermPlanCourse(event, ${student_term_plan_id}, ${course_id}, this)">Delete</button></td>
          </tr>
        `
      }

      edit_section_html += `
      </table>
      
      <h3>Add Course</h3>
      <button id="cancel_edit_student_term_plan_courses_section" type="button" onclick="toggleStudentTermPlanForm('view_student_term_plans_section', reload=true)">Cancel</button>
      <table border="1">
        <tr>
          <th>New Course</th>
          <th>Submit</th>
        </tr>
        <tr>
          <td>
            <select name="student_term_plan_add_course" id="student_term_plan_add_course"aria-label="Course">
              <option value="" disabled selected>Select a course</option>
      `;
          
      for (const course_object of course_objects) {
        const is_current_course = courses_array.includes(course_object["course"]);
        
        edit_section_html += `
          <option value="${course_object["id"]}" ${is_current_course ? "disabled" : ""}>
            ${course_object["course"]}
          </option>
        `;
      }

      edit_section_html += `
            </select>
            </td>
            <td><button type="button" onclick="addStudentTermPlanCourse(event, ${student_term_plan_id}, this)">Submit</button></td>
          </tr>
        `
      edit_section_html += "</table>";

      // Apply html to section and toggle view to on
      edit_section.innerHTML = edit_section_html;
      toggleStudentTermPlanForm("edit_student_term_plan_courses_section")
    }

    // Handle updating a student term plan course
    async function updateStudentTermPlanCourse(event, student_term_plan_id, course_id, button_element) {
      // Prevent page from refreshing
      event.preventDefault();
      console.log(course_id);

      // Get new course ID from value of closest select option
      const new_course_id = button_element.closest("tr").querySelector("select").value;

      // Get row being deleted and table element
      const tr_element = button_element.closest("tr");
      const table = tr_element.closest("table");

      // Check if attempting to mark last row as 'None'
      if (new_course_id === "None" && table.querySelectorAll("tr:not(:first-child)").length === 1) {
        window.alert("You can't mark the last course on a student term plan as 'None' as each plan must have a minimum of 1 course.");
        return;
      }

      // Display a confirmation popup
      if (!confirm("Are you sure you want to update this course?")) {
        return
      }
      
      // Call Flask route to update student term plan course
      const response = await fetch(
        "/edit-student-term-plan", {
          headers: {
            "Content-Type": "application/json"
          },
          method: "PATCH",
          body: JSON.stringify({"action": "update", "student_term_plan_id": student_term_plan_id, "course_id": course_id, "new_course_id": new_course_id})
        }
      )
    
      const message = await response.json();
      console.log(JSON.stringify(message));

      // Display confirmation/error popup on screen
      window.alert(message["message"].replace('"', ''));

      // Successful Response
      if (response.status == 200) {
        toggleStudentTermPlanForm("view_student_term_plans_section", refresh=true)
      } 
    }

    // Handle adding a student term plan course
    async function addStudentTermPlanCourse(event, student_term_plan_id, button_element) {
      // Prevent page from refreshing
      event.preventDefault();

      // Get new course ID from value of closest select option
      const new_course_id = button_element.closest("tr").querySelector("select").value;
      
      // Call Flask route to add student term plan course
      const response = await fetch(
        "/edit-student-term-plan", {
          headers: {
            "Content-Type": "application/json"
          },
          method: "PATCH",
          body: JSON.stringify({"action": "add", "student_term_plan_id": student_term_plan_id, "new_course_id": new_course_id})
        }
      )
    
      const message = await response.json();
      console.log(JSON.stringify(message));

      // Display confirmation/error popup on screen
      window.alert(message["message"].replace('"', ''));

      // Successful Response
      if (response.status == 200) {
        toggleStudentTermPlanForm("view_student_term_plans_section", refresh=true)
      } 
    }

    // Handle updating advisor approval of a plan
    async function updateAdvisorApproval(event, form) {
      // Prevent page from refreshing
      event.preventDefault();

      // Get values from the form
      const student_term_plan_id = parseInt(form.querySelector("#student_term_plan_id").value, 10);
      const advisor_approved = parseInt(form.querySelector('input[name="advisor_approved"]:checked').value, 10);

      // Call Flask route to update approval status
      const response = await fetch(
        "/update-student-term-plan-advisor-approval", {
          headers: {
            "Content-Type": "application/json"
          },
          method: "PATCH",
          body: JSON.stringify({"student_term_plan_id": student_term_plan_id, "advisor_approved": advisor_approved})
        }
      )
    
      const message = await response.json();
      console.log(JSON.stringify(message));

      // Display confirmation/error popup on screen
      window.alert(message["message"].replace('"', ''));

      // Refresh page on Unuccessful Response to set back radio button
      if (response.status != 200) {
        toggleStudentTermPlanForm("view_student_term_plans_section", refresh=true)
      } 
    }

    // Add listeners
    document.addEventListener("DOMContentLoaded", function () {
      document.getElementById("add_student_term_plan_form").onsubmit = addStudentTermPlan
    })

  </script>
{% endblock %}
{% block header %}Student Term Plans{% endblock %}
{% block main %}
  {# View All Term Plans Section #}
  <section id="view_student_term_plans_section" style="display: block;">
    <h3>View All Student Term Plans</h3>
    <button id="add_student_term_plan_button" type="button" onclick="toggleStudentTermPlanForm('add_student_term_plan_section')">Add New Student Term Plan</button>
    <table border="1">
      <tr>
        <th>Plan ID</th>
        <th>Student ID</th>
        <th>Student Name</th>
        <th>Term</th>
        <th>Courses</th>
        <th>Advisor Approved</th>
        <th>Add/Update/Delete Courses</th>
        <th>Delete Plan</th>
      </tr>
      {% for student_term_plan in student_term_plans %}
      <tr>
        <td>{{ student_term_plan["studentTermPlanID"] }}</td>
        <td>{{ student_term_plan["studentID"] }}</td>
        <td>{{ student_term_plan["studentName"] }}</td>
        <td>{{ student_term_plan["termName"] }}</td>
        <td>
          {% if student_term_plan["courses"] %}
            {{ student_term_plan["courses"].replace(", ", ", <br>")|safe }}
          {% else %}
            None
          {% endif %}
        </td>
        {#<td>{{ student_term_plan["advisorApproved"] }}</td>#}
        
        <td>
          <form>
            <input type="hidden" value="{{ student_term_plan['studentTermPlanID'] }}" id="student_term_plan_id" name="student_term_plan_id">
            <label>
              <input type="radio" name="advisor_approved" value=1 {{ "checked" if student_term_plan["advisorApproved"] == "Yes" else "" }} onchange="updateAdvisorApproval(event, this.form)">Yes
            </label><br>
            <label>
              <input type="radio" name="advisor_approved" value=0 {{ "checked" if student_term_plan["advisorApproved"] == "No" else "" }} onchange="updateAdvisorApproval(event, this.form)">No
            </label>
          </form>
        </td>
        
        <td><button id="edit_student_term_plan_courses_button" type="button" onclick="buildUpdateStudentTermPlanSection(event, {{ student_term_plan['studentTermPlanID'] }}, '{{ student_term_plan['studentName'] }}', '{{ student_term_plan['termName'] }}', '{{ student_term_plan['courses'] }}')">Edit</button></td>
        <td><button id="edit_student_term_plan_courses_button" type="button" onclick="deleteStudentTermPlan(event, {{ student_term_plan['studentTermPlanID'] }}, this)">Delete</button></td>
      </tr>
      {% endfor %}
    </table>
  </section>

  {# Add New Term Plan Section #}
  <section id="add_student_term_plan_section" style="display: none;">
    <h3>Add New Student Term Plan</h3>
    <form id="add_student_term_plan_form" style="border: 1px solid black; padding: 15px;">

      {# Student #}
      <label for="student_id">Student</label><br>
      <select name="student_id" id="student_id" aria-label="Student" required>
        <option value="" disabled selected>Select a student</option>

        {% for student in students %}
        <option value={{ student["studentID"] }}>{{ student["student"] }}</option>
        {% endfor %}

      </select><br>

      {# Term #}
      <label for="term_id">Term</label><br>
      <select name="term_id" id="term_id" aria-label="Term" required>
        <option value="" disabled selected>Select a term</option>

        {% for term in terms %}
        <option value={{ term["id"] }}>{{ term["name"] }}</option>
        {% endfor %}

      </select><br>

      {# Advisor Approved #}
      <p>Advisor Approved</p>
      <label>
        <input type="radio" name="advisor_approved" value=1>Yes
      </label><br>
      <label>
        <input type="radio" name="advisor_approved" value=0>No
      </label><br>

      {# Courses #}
      <p>Courses</p>
      {% for course in courses %}
      <label>
        <input type="checkbox" name="courses" value={{ course["id"] }}> {{ course["course"]
        }}
      </label><br>
      {% endfor %}

      {# Submit and Cancel Buttons #}
      <button id="submit_add_student_term_plan_button" type="submit">Submit</button><br>
      <button id="cancel_add_student_term_plan_button" type="button" onclick="toggleStudentTermPlanForm('view_student_term_plans_section')">Cancel</button>
    </form>
  </section>


  {# Update or Delete Student's Courses in Student Term Plan #}
  <section id="edit_student_term_plan_courses_section" style="display: none;">
    {# Section constructed via JS function #}
  </section>
{% endblock %}